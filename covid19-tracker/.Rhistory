scov<-sars_cov[[1]][[11]]
scov2<-sars_cov2[[1]][[11]]
ebol<-ebola[[1]][[11]]
names(scov)<-sars_cov[[1]][[4]]
names(scov2)<-sars_cov2[[1]][[4]]
names(ebol)<-ebola[[1]][[4]]
aa<-paste0('>', rownames(alignment)[1], '\n', toString(alignment[1,1]), '\n',   #Generate df for uploading to mySQL
'>', rownames(alignment)[2], '\n', toString(alignment[2,1]), '\n',
'>', rownames(alignment)[3], '\n', toString(alignment[3,1]))
write(aa, "aa.fasta")
fasta<-readDNAStringSet("aa.fasta")
fasta
msa1<-msa(fasta, method = "ClustalW", type = "dna")
msa1
alignment2Fasta(msa1, "msa.fasta")
msaPrettyPrint(msa1, output="pdf", showNames="none",
showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
msaPrettyPrint(msa1, output="pdf", showNames="none",
showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
msaPrettyPrint(msa1, output="pdf", showNames="none",
showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
Sys.getenv("PATH")
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"C:/Program Files/MiKTeX 2.9/miktex/bin/x64/",sep=";"))
msaPrettyPrint(msa1, output="pdf", showNames="none",
showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
write(aa, "sequences.fasta")
msaPrettyPrint(msa1, output="pdf", showNames="none",
showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
msaPrettyPrint(msa1, output="asis", y=c(164, 213),
subset=c(1:6), showNames="none", showLogo="top",
logoColors="rasmol", shadingMode="similar",
showLegend=FALSE, askForOverwrite=FALSE)
msaPrettyPrint(msa1, output="asis",
subset=c(1:6), showNames="none", showLogo="top",
logoColors="rasmol", shadingMode="similar",
showLegend=FALSE, askForOverwrite=FALSE)
msaPrettyPrint(msa1, output="asis",
showNames="none", showLogo="top",
logoColors="rasmol", shadingMode="similar",
showLegend=FALSE, askForOverwrite=FALSE)
msaPrettyPrint(msa1, output="pdf",
showNames="none", showLogo="top",
logoColors="rasmol", shadingMode="similar",
showLegend=FALSE, askForOverwrite=FALSE)
msaConservationScore(msa1)
data("BLOSUM62")
msaConservationScore(msa1, "BLOSUM62")
msaConservationScore(msa1, BLOSUM62)
score<-msaConservationScore(msa1, BLOSUM62)
score1<-sum(score)
View(sars_cov)
sars_cov
FJ588686$FEATURES$CDS[7]
sars_cov$FJ588686$FEATURES$CDS[7]
sars_cov$FJ588686$FEATURES$CDS
sars_cov[["FJ588686"]][["FEATURES"]][["CDS"]][["Qualifier"]]
sars_cov[["FJ588686"]][["SOURCE"]]
sars_cov[[1]][[10]][[1]]
sars_cov[[1]][[10]][[2]]
sars_cov[[1]][[10]][[3]]
sars_cov[[1]][[10]][["CDS"]]
sars_cov[[1]][[10]][["CDS"]][7,]
msaConsensusSequence(myFirstAlignment)
msaConsensusSequence(msa1)
consens<-strsplit(msaConsensusSequence(msa1), "")
View(consens)
consens<-consens[[1]]
dna<-c("A", "G", "C", "T")
length(match(consens, dna))
length(consens)
length(which(consens %in% dna))
length(which(consens %in% dna))/length(consens)
write(msa1, msa.txt)
write(msa1, "msa.txt")
msaConsensusSequence(msa1)
length(which("?" %in% dna))/length(consens)
length(which("?" %in% consens))/length(consens)
length(which("?" %in% consens))
length(which(consens %in% "?"))
length(consens %in% "?")
length(consens)
length("?" %in% consens)
length(which(consens %in% dna))
length(which(consens %in% "-"))
library(highcharter)
hcmap("countries/nz/nz-all")
hcmap("countries/tr/tr-all")
mapdata <- get_data_from_map(download_map_data("countries/us/us-all"))
mapdata <- get_data_from_map(download_map_data("countries/tr/tr-all"))
View(mapdata)
options(encoding = "utf8")
mapdata <- get_data_from_map(download_map_data("countries/tr/tr-all"))
Sys.setlocale(category = "LC_ALL", locale = "Turkish")
mapdata <- get_data_from_map(download_map_data("countries/tr/tr-all"))
shiny::runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
View(ch_totaln)
View(ch_todayn)
View(total)
View(totaln)
ch_totaln<-totaln[,2:5]
runApp('C:/Users/phago/Desktop/corona-app-v1')
hcmap("countries/tr/tr-all", showInLegend = FALSE) %>%
hc_add_series(data = mapdata1, type = "mapbubble", name = "Cities", maxSize = '10%') %>%
hc_mapNavigation(enabled = TRUE)
View(mapdata1)
url2<- "https://tr.wikipedia.org/wiki/Türkiye%27de_2020_koronavirüs_pandemisi"
webpage2 <- read_html(url2)
turkey <- html_nodes(webpage2,'.mw-parser-output div td:nth-child(1)')
data_turkey<-html_text(turkey)
data_turkey<-data_turkey[37:117]
data_turkey<-html_text(turkey)
data_turkey<-data_turkey[38:118]
data_turkey<-gsub("\n", "", data_turkey)
runApp('C:/Users/phago/Desktop/corona-app-v1')
View(mapdata1)
class(mapdata1$z)
View(data_turkey)
turkey2 <- html_nodes(webpage2,'.mw-parser-output div td:nth-child(2)')
data_turkey2<-html_text(turkey2)
data_turkey2<-data_turkey2[36:116]
data_turkey2<-gsub("\n", "", data_turkey2)
data_turkey2
turkey2 <- html_nodes(webpage2,'.mw-parser-output div td:nth-child(2)')
data_turkey2<-html_text(turkey2)
data_turkey2<-data_turkey2[36:116]
data_turkey2
turkey2 <- html_nodes(webpage2,'.mw-parser-output div td:nth-child(2)')
data_turkey2<-html_text(turkey2)
data_turkey2<-data_turkey2[37:117]
data_turkey2<-gsub("\n", "", data_turkey2)
data_turkey$`Vaka sayısı` <- data_turkey2
View(data_turkey)
runApp('C:/Users/phago/Desktop/corona-app-v1')
View(mapdata1)
mapdata1$z<-as.numeric(mapdata1$z)
class(mapdata1$z)
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
total
changevaka<-(todayn$`Vaka sayisi`[length(todayn$`Vaka sayisi`)]-todayn$`Vaka sayisi`[length(todayn$`Vaka sayisi`)-1])/
todayn$`Vaka sayisi`[length(todayn$`Vaka sayisi`)-1]
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
shiny::runApp('C:/Users/phago/Desktop/covid19-tracker/covid19-tracker')
#library(rjson)
#library(RCurl)
library(jsonlite)
runApp('C:/Users/phago/Desktop/covid19-tracker/covid19-tracker')
encodedurl<-URLencode("https://pomber.github.io/covid19/timeseries.json")
out <-  jsonlite::fromJSON(encodedurl)
length(out)
x<-out[["Turkey"]]
x
out[[5]][2]
out[[5]][2,]
encodedurl<-URLencode("https://pomber.github.io/covid19/timeseries.json")
out <-  jsonlite::fromJSON(encodedurl)
df <- data.frame(matrix(name(out), nrow = length(out), ncol = 1))
encodedurl<-URLencode("https://pomber.github.io/covid19/timeseries.json")
out <-  jsonlite::fromJSON(encodedurl)
df <- data.frame(matrix(names(out), nrow = length(out), ncol = 1))
names(df)<-"countries"
for (i in 1:length(out)){
a <- length(out[[1]])
df$confirmed[i] <- out[[i]][a,2]
df$deaths[i] <- out[[i]][a,3]
df$recovered[i] <- out[[i]][a,4]
}
View(df)
out[["china"]]
out[["China"]]
View(df)
out[["China"]][length(out[["China"]])]
out[["China"]][length(out[["China"]]),]
out[["China"]][length(out[["China"]][1]),]
out[["China"]][length(out[["China"]][1,]),]
out[["China"]][length(out[["China"]][,1]),]
encodedurl<-URLencode("https://pomber.github.io/covid19/timeseries.json")
out <-  jsonlite::fromJSON(encodedurl)
df <- data.frame(matrix(names(out), nrow = length(out), ncol = 1))
names(df)<-"countries"
for (i in 1:length(out)){
a <- length(out[[1]][,1])
df$confirmed[i] <- out[[i]][a,2]
df$deaths[i] <- out[[i]][a,3]
df$recovered[i] <- out[[i]][a,4]
}
View(df)
hcmap("world")
hcmap("custom/world-highres")
worlddata<- get_data_from_map(download_map_data("custom/world-highres"))
View(worlddata)
a<-names(out)
b<-a[which(a %in% worlddata$name)]
View(mapdata1)
View(mapdata1)
nout<-data.frame(names(out))
worlddata<- get_data_from_map(download_map_data("custom/world-highres"))
nout$lat <- worlddata$`hc-middle-x`[match(names(out), worlddata$name)]
View(nout)
nout$lat <- worlddata$`hc-middle-x`[pmatch(names(out), worlddata$name)]
nout$lat <- worlddata$`hc-middle-x`[match(names(out), worlddata$name)]
nout<-data.frame(names(out))
nout$lat <- worlddata$`hc-middle-x`[match(names(out), worlddata$name)]
View(mapdata1)
nout$lon <- worlddata$`hc-middle-y`[match(names(out), worlddata$name)]
View(df)
names(nout)[1]<-"countries"
nout<-merge(nout, df, by = "countries")
View(mapdata1)
nout<-data.frame(names(out))
nout$hc-key <- worlddata$`hc-key`[match(names(out), worlddata$name)]
nout$`hc-key` <- worlddata$`hc-key`[match(names(out), worlddata$name)]
names(nout)[1]<-"countries"
nout<-merge(nout, df, by = "countries")
hcmap("custom/world-highres", data = nout, value = "confirmed",
joinBy = "hc-key", name = "Fake data",
dataLabels = list(enabled = TRUE, format = '{point.name}'),
borderColor = "#FAFAFA", borderWidth = 0.1,
tooltip = list(valueDecimals = 2, valuePrefix = "$", valueSuffix = " USD"))
hcmap("custom/world-highres", data = nout, value = "confirmed",
joinBy = "hc-key", name = "confirmed cases",
dataLabels = list(enabled = FALSE, format = '{point.name}'),
borderColor = "#FAFAFA", borderWidth = 0.1)
hcmap("custom/world-highres", data = nout, value = "confirmed",
joinBy = "hc-key", name = "confirmed cases",
dataLabels = list(enabled = FALSE, format = '{point.name}'),
borderColor = "blue", borderWidth = 0.1)
nout<-data.frame(names(out))
nout$`hc-key` <- worlddata$`hc-key`[match(names(out), worlddata$name)]
names(nout)[1]<-"countries"
nout<-merge(nout, df, by = "countries")
nout[c(12,28,30,39,40,42,46,58,72,91,126,148,164,165,167,177),2]<- c("bs","mm","cv","cg","cd","ci","cz","sz","gw","kr","mk","rs","tw","tz","tl","us")
hcmap("custom/world-highres", data = nout, value = "confirmed",
joinBy = "hc-key", name = "confirmed cases",
dataLabels = list(enabled = FALSE, format = '{point.name}'),
borderColor = "blue", borderWidth = 0.1)
hcmap("custom/world", data = nout, value = "confirmed",
joinBy = "hc-key", name = "confirmed cases",
dataLabels = list(enabled = FALSE, format = '{point.name}'),
borderColor = "blue", borderWidth = 0.1)
hcmap("custom/world", data = nout, value = "confirmed",
joinBy = "hc-key", name = "confirmed cases",
dataLabels = list(enabled = FALSE, format = '{point.name}'),
borderColor = "blue", borderWidth = 0.1)
runApp('C:/Users/phago/Desktop/covid19-tracker/covid19-tracker')
runApp('C:/Users/phago/Desktop/covid19-tracker/covid19-tracker')
runApp('C:/Users/phago/Desktop/covid19-tracker/covid19-tracker')
runApp('C:/Users/phago/Desktop/covid19-tracker/covid19-tracker')
library(devtools)
install_github("nik01010/dashboardthemes")
install_github("nik01010/dashboardthemes")
remove.packages("digest")
.libPaths()
remove.packages("digest")
install_github("nik01010/dashboardthemes")
install.packages("utils")
install.packages("utils")
library(installr)
install.packages("installr")
library(installr)
install.packages("utils")
install.packages("utils")
install.packages("R.utils")
install.packages('utils',repos='http://cran.us.r-project.org')
install.packages("utils", repos = "http://cran.us.r-project.org")
install.packages("methods", repos = "http://cran.us.r-project.org")
install.packages("methods", repos = "http://cran.us.r-project.org")
library(devtools)
install.packages("digest")
library(devtools)
install_github("nik01010/dashboardthemes")
remove.packages("Rcpp")
library(devtools)
install.packages("Rcpp")
library(devtools)
install_github("nik01010/dashboardthemes")
install_github("nik01010/dashboardthemes")
remove.packages("rlang")
shiny::runApp('C:/Users/phago/Desktop/covid19-tracker/covid19-tracker')
runApp('C:/Users/phago/Desktop/covid19-tracker/covid19-tracker')
library(shinyWidgets)
runApp('C:/Users/phago/Desktop/Mustafa/CilioGenics/app-1')
paramecium <- fread("Paramecium.txt")
setwd("C:/Users/phago/Desktop/CilioGenics_files_13.03.20/ExportToDrive/microarray")
paramecium <- fread("Paramecium.txt")
setwd("C:/Users/phago/Desktop/CilioGenics_files_13.03.20/ExportToDrive/publications")
paramecium <- fread("Paramecium.txt")
unique(paramecium)
unique(paramecium$V2)
setwd("C:/Users/phago/Desktop/covid19-tracker/covid19-tracker")
todayn<-fread("./data/today.txt")
totaln<-fread("./data/total.txt")
daten<-fread("./data/date.txt", sep = ",")
daten<-as.data.frame(daten)
todayn<-as.data.frame(todayn)
totaln<-as.data.frame(totaln)
View(todayn)
dat<-read.csv("./data/data_turkey.txt")
View(dat)
a <- read.csv("./data/first_index.txt")
b <- read.csv("./data/last_index.txt")
a <- a$x
b <- b$x
url <- "https://covid19.saglik.gov.tr"
webpage <- read_html(url)
todaysNumbers <- html_nodes(webpage,'.baslik-k-2 span:nth-child(2)')
data_todaysNumbers<-html_text(todaysNumbers)
data_todaysNumbers<-gsub("\\.", "", data_todaysNumbers)
data_todaysNumbers<-as.numeric(data_todaysNumbers)
totalNumbers <- html_nodes(webpage,'.col-sm-6 span+ span')
data_totalNumbers<-html_text(totalNumbers)
data_totalNumbers<-gsub("\\.", "", data_totalNumbers)
data_totalNumbers<-gsub("\r\n                                                                        ", "", data_totalNumbers)
data_totalNumbers<-gsub("\r\n                                                                    ", "", data_totalNumbers)
data_totalNumbers<-as.numeric(data_totalNumbers)
dates <- html_nodes(webpage, '.text-center p')
data_dates<-html_text(dates)
rdate<-paste(data_dates[1], data_dates[2], data_dates[3])
rrdate<-strsplit(rdate, split = "")
rrdate<-unlist(rrdate)
rdate<-gsub(rrdate[5], "I", rdate)
rdate<-data.frame(rdate, stringsAsFactors = FALSE)
colnames(rdate)<-"Tarih"
today<-t(data_todaysNumbers)
today<-as.data.frame(today)
colnames(today)<-c("Test sayisi", "Vaka sayisi", "Vefat sayisi", "Iyilesen sayisi")
today$date<-rdate$Tarih
total<-t(data_totalNumbers)
total<-as.data.frame(total)
total<-total[c(1:3,6)]
colnames(total)<-c("Test sayisi", "Vaka sayisi", "Vefat sayisi", "Iyilesen sayisi")
total$date<-rdate$Tarih
View(rdate)
View(daten)
if (daten$Tarih != rdate$Tarih){
daten <- rdate
todayn <- rbind(todayn, today)
totaln <- rbind(totaln, total)
write.csv(daten, "./data/date.txt", row.names = FALSE)
write.csv(todayn, "./data/today.txt", row.names = FALSE)
write.csv(totaln, "./data/total.txt", row.names = FALSE)
a=5
}
ch_todayn<-todayn[,2:5]
ch_totaln<-totaln[,2:5]
changetest<-(todayn$`Test sayisi`[length(todayn$`Test sayisi`)]-todayn$`Test sayisi`[length(todayn$`Test sayisi`)-1])/
todayn$`Test sayisi`[length(todayn$`Test sayisi`)-1]
changevaka<-(todayn$`Vaka sayisi`[length(todayn$`Vaka sayisi`)]-todayn$`Vaka sayisi`[length(todayn$`Vaka sayisi`)-1])/
todayn$`Vaka sayisi`[length(todayn$`Vaka sayisi`)-1]
url2<- "https://tr.wikipedia.org/wiki/T\u00FCrkiye%27de_2020_koronavir\u00FCs_pandemisi"
webpage2 <- read_html(url2)
turkey <- html_nodes(webpage2,'.mw-parser-output div td:nth-child(1)')
data_turkey<-html_text(turkey)
a <- read.csv("./data/first_index.txt")
b <- read.csv("./data/last_index.txt")
a <- a$x
b <- b$x
url <- "https://covid19.saglik.gov.tr"
webpage <- read_html(url)
todaysNumbers <- html_nodes(webpage,'.baslik-k-2 span:nth-child(2)')
data_todaysNumbers<-html_text(todaysNumbers)
data_todaysNumbers<-gsub("\\.", "", data_todaysNumbers)
data_todaysNumbers<-as.numeric(data_todaysNumbers)
totalNumbers <- html_nodes(webpage,'.col-sm-6 span+ span')
data_totalNumbers<-html_text(totalNumbers)
data_totalNumbers<-gsub("\\.", "", data_totalNumbers)
data_totalNumbers<-gsub("\r\n                                                                        ", "", data_totalNumbers)
data_totalNumbers<-gsub("\r\n                                                                    ", "", data_totalNumbers)
data_totalNumbers<-as.numeric(data_totalNumbers)
dates <- html_nodes(webpage, '.text-center p')
data_dates<-html_text(dates)
rdate<-paste(data_dates[1], data_dates[2], data_dates[3])
rrdate<-strsplit(rdate, split = "")
rrdate<-unlist(rrdate)
rdate<-gsub(rrdate[5], "I", rdate)
rdate<-data.frame(rdate, stringsAsFactors = FALSE)
colnames(rdate)<-"Tarih"
today<-t(data_todaysNumbers)
today<-as.data.frame(today)
colnames(today)<-c("Test sayisi", "Vaka sayisi", "Vefat sayisi", "Iyilesen sayisi")
today$date<-rdate$Tarih
total<-t(data_totalNumbers)
total<-as.data.frame(total)
total<-total[c(1:3,6)]
colnames(total)<-c("Test sayisi", "Vaka sayisi", "Vefat sayisi", "Iyilesen sayisi")
total$date<-rdate$Tarih
if (daten$Tarih != rdate$Tarih){
daten <- rdate
todayn <- rbind(todayn, today)
totaln <- rbind(totaln, total)
write.csv(daten, "./data/date.txt", row.names = FALSE)
write.csv(todayn, "./data/today.txt", row.names = FALSE)
write.csv(totaln, "./data/total.txt", row.names = FALSE)
a=5
}
ch_todayn<-todayn[,2:5]
ch_totaln<-totaln[,2:5]
changetest<-(todayn$`Test sayisi`[length(todayn$`Test sayisi`)]-todayn$`Test sayisi`[length(todayn$`Test sayisi`)-1])/
todayn$`Test sayisi`[length(todayn$`Test sayisi`)-1]
changevaka<-(todayn$`Vaka sayisi`[length(todayn$`Vaka sayisi`)]-todayn$`Vaka sayisi`[length(todayn$`Vaka sayisi`)-1])/
todayn$`Vaka sayisi`[length(todayn$`Vaka sayisi`)-1]
url2<- "https://tr.wikipedia.org/wiki/T\u00FCrkiye%27de_2020_koronavir\u00FCs_pandemisi"
webpage2 <- read_html(url2)
turkey <- html_nodes(webpage2,'.mw-parser-output div td:nth-child(1)')
data_turkey<-html_text(turkey)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ui<-dashboardPagePlus(
title = "Covid19 tracker",
enable_preloader = TRUE,
dashboardHeader(
title = span(img(src = "virus-solid.svg", height = 35), "Covid19 tracker"),
titleWidth = 300,
dropdownMenu()
))
Sys.setlocale("LC_ALL", "turkish")
library(shinydashboardPlus)
library(shinydashboard)
library(shiny)
library(highcharter)
library(devtools)
library(dashboardthemes)
source("helper.R")
#source("global.R")
ui<-dashboardPagePlus(
title = "Covid19 tracker",
enable_preloader = TRUE,
dashboardHeader(
title = span(img(src = "virus-solid.svg", height = 35), "Covid19 tracker"),
titleWidth = 300,
dropdownMenu()
),
dashboardSidebar(header = singleton(tags$head(includeHTML(("google-analytics.html")))),
sidebarMenu(
menuItem("Turkiye", tabName = "turkey", icon = icon("flag")),
menuItem("Dunya", tabName = "world", icon = icon("globe"), badgeLabel = "Yeni", badgeColor = "green")
),
tags$audio(src = "butterfly_piano.mp3", type = "audio/mp3", autoplay = TRUE, controls = FALSE)
),
dashboardBody(
shinyDashboardThemes(
theme = "onenote"
),
tabItems(
tabItem( tabName = "turkey",
fluidRow(
column(width = 3,
valueBox(format(total$`Test sayisi`, big.mark = ","), "Toplam test sayÄ±sÄ±", icon = icon("vials"), width = NULL),
valueBox(format(today$`Test sayisi`, big.mark = ","), "Bugunku test sayÄ±sÄ±", icon = icon("vial"), width = NULL),
valueBox(paste0("%", format(changetest, digits = 2)), "Test sayÄ±sÄ±ndaki deÄŸiÅŸim", icon = icon("chart-line"), width = NULL)),
column(width = 3,
valueBox(format(total$`Vaka sayisi`, big.mark = ","), "Toplam vaka sayÄ±sÄ±", icon = icon("vials"), width = NULL),
valueBox(format(today$`Vaka sayisi`, big.mark = ","), "Bugunku vaka sayÄ±sÄ±", icon = icon("vial"), width = NULL),
valueBox(paste0("%", format(changevaka, digits = 2)), "Vaka sayÄ±sÄ±ndaki deÄŸiÅŸim", icon = icon("chart-line"), width = NULL)),
box(
highchartOutput("map")
),
box(
highchartOutput("dailychart")),
box(
highchartOutput("totalchart")
)
)
),
tabItem( tabName = "world",
fluidRow(
selectInput(inputId = "countryName", label = "Bir ulke secin", choices = names(out), selected = "Turkey"),
box( highchartOutput("worldchart")),
box( highchartOutput("worldmap")),
selectInput(inputId = "countryName1", label = "Bir ulke secin", choices = names(out), selected = "Italy"),
box( highchartOutput("worldchart1")),
)
)
)
)
)
install.packages("shiny.semantic")
runApp()
runApp()
runApp()
rm(ls())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
