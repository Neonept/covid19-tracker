ciliaryGenes1<-select(ciliaryGenes, Gene.Name)
View(ciliaryGenes)
ciliaryGenes<-read.csv("./data/OurOwn_NewGoldStandartList_2019.tsv", sep = "\t", stringsAsFactors = FALSE)
View(ciliaryGenes)
ciliaryGenes1<-select(ciliaryGenes, Gene.Name)
ciliaryGenes1<-select(ciliaryGenes, Gene.Name)
#library(profvis)
library(dplyr)
ciliaryGenes1<-select(ciliaryGenes, Gene.Name)
select(ciliaryGenes,Gene.Name)
invisible(lapply(paste0('package:', names(sessionInfo()$otherPkgs)), detach, character.only=TRUE, unload=TRUE))
shiny::runApp()
runApp('C:/Users/phago/Desktop/R Shiny/deneme/deneme.R')
Customer <- c("England", "France", "US", "Canada", "England", "France", "US", "Canada", "England")
OnTime <- c("On Time", "On Time", "Overdue", "On Time", "Overdue", "On Time", "Overdue","On Time", "On Time")
Gate <- c(1,2,3,2,3,2,1,2,3)
Quantity <- c(1,1,1,1,1,1,1,1,1)
data <- data.frame(Customer,OnTime,Gate, Quantity)
View(data)
View(data)
temp <- data
View(temp)
runApp('C:/Users/phago/Desktop/R Shiny/deneme/deneme.R')
runApp('C:/Users/phago/Desktop/R Shiny/deneme/deneme.R')
runApp()
View(score_table)
View(data)
runApp('C:/Users/phago/Desktop/R Shiny/deneme/deneme.R')
View(aa)
ciliarynonciliary("TMEM145")
ciliarynonciliary<-function(gene.name){
a<-nscores2[which(aa$tree == aa$tree[which(aa$gene_name == gene.name)]),73]
cl<-length(a[which(a %in% ciliaryGenes1$Gene.Name)])
ncl<-length(a[which(a %in% not_ciliary$`Gene Name`)])
nnl<-length(a)-length(cl)-length(ncl)
b<-data.frame("Gene type" = c("Ciliary", "Nonciliary", "Unknown"), Number = c(cl, ncl, nnl)) %>%
mutate(per=Number/sum(Number))
b$Percentage<-scales::percent(b$per)
colnames(b)[1]<-"Gene type"
b
}
head(ciliarynonciliary("TMEM145"))
class(ciliarynonciliary("TMEM145"))
ciliarynonciliary("TMEM145")[3,]
runApp()
runApp()
View(ciliaryGenes1)
View(not_ciliary)
View(score_table)
runApp()
runApp()
View(aa)
runApp()
View(aa)
runApp()
colnames(ciliaryGenes1)[1]<-"Gene_name"
colnames(not_ciliary)[1]<-"Gene_name"
colnames(aa)[1]<-"Gene_name"
score_table<-merge(score_table, aa, by = "Gene_name")
View(score_table)
score_table$Type<-"Unknown"
score_table$Type[match(ciliaryGenes1$Gene_name, score_table$Gene_name)]<-"Ciliary"
score_table$Type[match(not_ciliary$Gene_name, score_table$Gene_name)]<-"Nonciliary"
View(score_table)
runApp()
runApp()
runApp()
a<-nscores2[which(aa$tree == aa$tree[which(aa$gene_name == gene.name)]),73]
cl<-length(a[which(a %in% ciliaryGenes1$Gene.Name)])
ncl<-length(a[which(a %in% not_ciliary$`Gene Name`)])
nnl<-length(a)-length(cl)-length(ncl)
b<-data.frame("Gene type" = c("Ciliary", "Nonciliary", "Unknown"), Number = c(cl, ncl, nnl)) %>%
mutate(per=Number/sum(Number))
b$Percentage<-scales::percent(b$per)
colnames(b)[1]<-"Gene type"
View(aa)
runApp()
runApp()
ciliarynonciliary<-function(gname){
a<-nscores2[which(aa$tree == aa$tree[which(aa$Gene_name == gname)]),73]
cl<-length(a[which(a %in% ciliaryGenes1$Gene_name)])
ncl<-length(a[which(a %in% not_ciliary$Gene_name)])
nnl<-length(a)-length(cl)-length(ncl)
b<-data.frame("Gene type" = c("Ciliary", "Nonciliary", "Unknown"), Number = c(cl, ncl, nnl)) %>%
mutate(per=Number/sum(Number))
b$Percentage<-scales::percent(b$per)
colnames(b)[1]<-"Gene type"
b
}
ciliarynonciliary("TMEM145")
ciliarynonciliary("TMEM145") %>%
hchart(type = "pie", hcaes(`Gene type`, Number, Percentage)) %>%
hc_title(text = "Distribution of Ciliary Genes",
align = "center",
style = list(fontWeight = "bold", fontSize = "30px")) %>%
hc_tooltip(enabled = T) %>%
hc_subtitle(text = paste("In Cluster", n),
align = "center",
style = list(fontWeight = "bold")) %>%
hc_add_theme(hc_theme_ffx()) %>%
hc_credits(enabled = T,text = "Data source: CilioGenics") %>%
hc_plotOptions(series = list(column = list(stacking = "normal"),
borderWidth=0,
dataLabels = list(enabled = TRUE),
events = list(click = ClickFunction)))
ciliarynonciliary("TMEM145") %>%
hchart(type = "pie", hcaes(`Gene type`, Number, Percentage)) %>%
hc_title(text = "Distribution of Ciliary Genes",
align = "center",
style = list(fontWeight = "bold", fontSize = "30px")) %>%
hc_tooltip(enabled = T) %>%
hc_subtitle(text = paste("In Cluster", n),
align = "center",
style = list(fontWeight = "bold")) %>%
hc_add_theme(hc_theme_ffx()) %>%
hc_credits(enabled = T,text = "Data source: CilioGenics") #%>%
runApp()
runApp()
runApp()
runApp()
ClickFunction <- JS("function(event) {Shiny.onInputChange('Clicked', event.point.name);}")
ciliarynonciliary("TMEM145") %>%
hchart(type = "pie", hcaes(`Gene type`, Number, Percentage)) %>%
hc_title(text = "Distribution of Ciliary Genes",
align = "center",
style = list(fontWeight = "bold", fontSize = "30px")) %>%
hc_tooltip(enabled = T) %>%
hc_subtitle(text = paste("In Cluster", n),
align = "center",
style = list(fontWeight = "bold")) %>%
hc_add_theme(hc_theme_ffx()) %>%
hc_credits(enabled = T,text = "Data source: CilioGenics") %>%
hc_plotOptions(series = list(column = list(stacking = "normal"),
borderWidth=0,
dataLabels = list(enabled = TRUE),
events = list(click = ClickFunction)))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/phago/Desktop/R Shiny/deneme/deneme.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("dqshiny")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
head(pokemon())
library(highcharter)
head(pokemon())
head(pokemon
)
head(pokemon$url_image)
runApp()
runApp()
hey
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("read.gb")
library(read.gb)
sars_cov<-read.gb("FJ588686_Bat_SARS_CoV Rs672_2006.gb")
setwd("~/")
sars_cov<-read.gb("FJ588686_Bat_SARS_CoV Rs672_2006.gb")
View(sars_cov)
sars_cov[["FJ588686"]]
scov<-unlist(sars_cov)
head(scov)
scov<-sars_cov[[11]]
scov<-sars_cov[[10]]
scov<-sars_cov[1][11]
View(scov)
scov[["NA"]]
scov<-sars_cov[1][10]
View(scov)
View(sars_cov)
sars_cov[["FJ588686"]][["ORIGIN"]]
sars_cov[[1]][[11]]
scov<-sars_cov[["FJ588686"]][["ORIGIN"]]
sars_cov2<-read.gb("MN908947_SARS_CoV2.gb")
View(sars_cov2)
sars_cov2[["MN908947"]][["VERSION"]]
sars_cov2[["MN908947"]][["SOURCE"]]
sars_cov2[["MN908947"]][["ORGANISM"]]
sars_cov2[["MN908947"]][["LOCUS"]]
scov<-sars_cov[[1]][[11]]
scov2<-sars_cov2[[1]][[11]]
ebol<-ebola[[1]][[11]]
ebola<-read.gb("AF086833_EBOLA.gb")
ebol<-ebola[[1]][[11]]
library(msa)
msa1<-msa(c(scov, scov2, ebol), method = "ClustalW")
msa1<-msa(c(scov, scov2, ebol), method = "ClustalW", type = "dna")
View(msa1)
source('~/alignment2Fasta.R')
alignment2Fasta(msa1, "msa.fasta")
length(rownames(msaq1))
length(rownames(msa1))
length(rownames(msa1))
alignment2Fasta(msa1, "msa.fasta")
msa1[[1]]
msa1
print(msa1)
library(read.gb)
library(msa)
sars_cov<-read.gb("FJ588686_Bat_SARS_CoV Rs672_2006.gb")
sars_cov2<-read.gb("MN908947_SARS_CoV2.gb")
ebola<-read.gb("AF086833_EBOLA.gb")
scov<-sars_cov[[1]][[11]]
scov2<-sars_cov2[[1]][[11]]
ebol<-ebola[[1]][[11]]
msa1<-msa(c(scov, scov2, ebol), method = "ClustalW", type = "dna")
msa1
alignment2Fasta(msa1, "msa.fasta")
source("alignment2Fasta.R")
alignment2Fasta(msa1, "msa.fasta")
msa1
unsource("alignment2Fasta.R")
alignment2Fasta(msa1, "msa.fasta")
exit
undebug(ls)
msa1
undebug(alignment2Fasta)
undebug(ls)
debuggingState(on = FALSE)
msa1
alignment<-data.frame(Accession = c(sars_cov[[1]][[4]], sars_cov2[[1]][[4]], ebola[[1]][[4]]),
Sequence = c(sars_cov[[1]][[11]], sars_cov2[[1]][[11]], ebola[[1]][[11]]))
library(read.gb)
library(msa)
sars_cov<-read.gb("FJ588686_Bat_SARS_CoV Rs672_2006.gb")
sars_cov2<-read.gb("MN908947_SARS_CoV2.gb")
ebola<-read.gb("AF086833_EBOLA.gb")
alignment<-data.frame(Accession = c(sars_cov[[1]][[4]], sars_cov2[[1]][[4]], ebola[[1]][[4]]),
Sequence = c(sars_cov[[1]][[11]], sars_cov2[[1]][[11]], ebola[[1]][[11]]))
filename<-"seq.fasta"
sink(filename)
cat(paste0('1'),'\n')
n <- length(rownames(alignment))
alignment<-data.frame(Sequence = c(sars_cov[[1]][[11]], sars_cov2[[1]][[11]], ebola[[1]][[11]]))
rownames(alignment)<-c(sars_cov[[1]][[4]], sars_cov2[[1]][[4]], ebola[[1]][[4]])
filename<-"seq.fasta"
sink(filename)
cat(paste0('1'),'\n')
n <- length(rownames(alignment))
for(i in seq(1, n)) {
cat(paste0('>', rownames(alignment)[i]))
cat('\t')
the.sequence <- toString(unmasked(alignment)[i,])
cat(the.sequence)
cat('\n')
}
for(i in seq(1, n)) {
cat(paste0('>', rownames(alignment)[i]))
cat('\t')
the.sequence <- toString(alignment[i,])
cat(the.sequence)
cat('\n')
}
sink(NULL)
df<-data.frame("sequence", stringsAsFactors = FALSE)
df[i,1]<-paste0('>', rownames(alignment)[1], '\n', toString(alignment[1]), '\n',   #Generate df for uploading to mySQL
'>', rownames(alignment)[2], '\n', toString(alignment[2]), '\n',
'>', rownames(alignment)[3], '\n', toString(alignment[3]))
df[i,1]<-paste0('>', rownames(alignment)[1,], '\n', toString(alignment[1,]), '\n',   #Generate df for uploading to mySQL
'>', rownames(alignment)[2,], '\n', toString(alignment[2,]), '\n',
'>', rownames(alignment)[3,], '\n', toString(alignment[3,]))
View(df)
aa<-paste0('>', rownames(alignment)[1,], '\n', toString(alignment[1,]), '\n',   #Generate df for uploading to mySQL
'>', rownames(alignment)[2,], '\n', toString(alignment[2,]), '\n',
'>', rownames(alignment)[3,], '\n', toString(alignment[3,]))
View(alignment)
aa<-paste0('>', rownames(alignment)[1,], '\n', toString(alignment[1,1]), '\n',   #Generate df for uploading to mySQL
'>', rownames(alignment)[2,], '\n', toString(alignment[2,1]), '\n',
'>', rownames(alignment)[3,], '\n', toString(alignment[3,1]))
aa<-paste0('>', rownames(alignment)[1], '\n', toString(alignment[1,1]), '\n',   #Generate df for uploading to mySQL
'>', rownames(alignment)[2], '\n', toString(alignment[2,1]), '\n',
'>', rownames(alignment)[3], '\n', toString(alignment[3,1]))
paste(head(aa))
head(aa)
write(aa, "aa.fasta")
msa1<-msa("aa.fasta", method = "ClustalW", type = "dna")
View(msa1)
source('~/alignment2Fasta.R')
alignment2Fasta(msa1, "msa.fasta")
length(rownames(msa1))
View(msa1)
msa1[[1]]
toString(unmasked(msa1[[1]]))
toString(unmasked(msa1)[[1]])
av<-toString(unmasked(msa1)[[1]])
library(read.gb)
library(msa)
source("alignment2Fasta.R")
sars_cov<-read.gb("FJ588686_Bat_SARS_CoV Rs672_2006.gb")
sars_cov2<-read.gb("MN908947_SARS_CoV2.gb")
ebola<-read.gb("AF086833_EBOLA.gb")
alignment<-data.frame(Sequence = c(sars_cov[[1]][[11]], sars_cov2[[1]][[11]], ebola[[1]][[11]]))
rownames(alignment)<-c(sars_cov[[1]][[4]], sars_cov2[[1]][[4]], ebola[[1]][[4]])
scov<-sars_cov[[1]][[11]]
scov2<-sars_cov2[[1]][[11]]
ebol<-ebola[[1]][[11]]
names(scov)<-sars_cov[[1]][[4]]
names(scov2)<-sars_cov2[[1]][[4]]
names(ebol)<-ebola[[1]][[4]]
aa<-paste0('>', rownames(alignment)[1], '\n', toString(alignment[1,1]), '\n',   #Generate df for uploading to mySQL
'>', rownames(alignment)[2], '\n', toString(alignment[2,1]), '\n',
'>', rownames(alignment)[3], '\n', toString(alignment[3,1]))
write(aa, "aa.fasta")
fasta<-readDNAStringSet("aa.fasta")
fasta
msa1<-msa(fasta, method = "ClustalW", type = "dna")
msa1
alignment2Fasta(msa1, "msa.fasta")
msaPrettyPrint(msa1, output="pdf", showNames="none",
showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
msaPrettyPrint(msa1, output="pdf", showNames="none",
showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
msaPrettyPrint(msa1, output="pdf", showNames="none",
showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
Sys.getenv("PATH")
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"C:/Program Files/MiKTeX 2.9/miktex/bin/x64/",sep=";"))
msaPrettyPrint(msa1, output="pdf", showNames="none",
showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
write(aa, "sequences.fasta")
msaPrettyPrint(msa1, output="pdf", showNames="none",
showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
msaPrettyPrint(msa1, output="asis", y=c(164, 213),
subset=c(1:6), showNames="none", showLogo="top",
logoColors="rasmol", shadingMode="similar",
showLegend=FALSE, askForOverwrite=FALSE)
msaPrettyPrint(msa1, output="asis",
subset=c(1:6), showNames="none", showLogo="top",
logoColors="rasmol", shadingMode="similar",
showLegend=FALSE, askForOverwrite=FALSE)
msaPrettyPrint(msa1, output="asis",
showNames="none", showLogo="top",
logoColors="rasmol", shadingMode="similar",
showLegend=FALSE, askForOverwrite=FALSE)
msaPrettyPrint(msa1, output="pdf",
showNames="none", showLogo="top",
logoColors="rasmol", shadingMode="similar",
showLegend=FALSE, askForOverwrite=FALSE)
msaConservationScore(msa1)
data("BLOSUM62")
msaConservationScore(msa1, "BLOSUM62")
msaConservationScore(msa1, BLOSUM62)
score<-msaConservationScore(msa1, BLOSUM62)
score1<-sum(score)
View(sars_cov)
sars_cov
FJ588686$FEATURES$CDS[7]
sars_cov$FJ588686$FEATURES$CDS[7]
sars_cov$FJ588686$FEATURES$CDS
sars_cov[["FJ588686"]][["FEATURES"]][["CDS"]][["Qualifier"]]
sars_cov[["FJ588686"]][["SOURCE"]]
sars_cov[[1]][[10]][[1]]
sars_cov[[1]][[10]][[2]]
sars_cov[[1]][[10]][[3]]
sars_cov[[1]][[10]][["CDS"]]
sars_cov[[1]][[10]][["CDS"]][7,]
msaConsensusSequence(myFirstAlignment)
msaConsensusSequence(msa1)
consens<-strsplit(msaConsensusSequence(msa1), "")
View(consens)
consens<-consens[[1]]
dna<-c("A", "G", "C", "T")
length(match(consens, dna))
length(consens)
length(which(consens %in% dna))
length(which(consens %in% dna))/length(consens)
write(msa1, msa.txt)
write(msa1, "msa.txt")
msaConsensusSequence(msa1)
length(which("?" %in% dna))/length(consens)
length(which("?" %in% consens))/length(consens)
length(which("?" %in% consens))
length(which(consens %in% "?"))
length(consens %in% "?")
length(consens)
length("?" %in% consens)
length(which(consens %in% dna))
length(which(consens %in% "-"))
library(highcharter)
hcmap("countries/nz/nz-all")
hcmap("countries/tr/tr-all")
mapdata <- get_data_from_map(download_map_data("countries/us/us-all"))
mapdata <- get_data_from_map(download_map_data("countries/tr/tr-all"))
View(mapdata)
options(encoding = "utf8")
mapdata <- get_data_from_map(download_map_data("countries/tr/tr-all"))
Sys.setlocale(category = "LC_ALL", locale = "Turkish")
mapdata <- get_data_from_map(download_map_data("countries/tr/tr-all"))
shiny::runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
View(ch_totaln)
View(ch_todayn)
View(total)
View(totaln)
ch_totaln<-totaln[,2:5]
runApp('C:/Users/phago/Desktop/corona-app-v1')
hcmap("countries/tr/tr-all", showInLegend = FALSE) %>%
hc_add_series(data = mapdata1, type = "mapbubble", name = "Cities", maxSize = '10%') %>%
hc_mapNavigation(enabled = TRUE)
View(mapdata1)
url2<- "https://tr.wikipedia.org/wiki/Türkiye%27de_2020_koronavirüs_pandemisi"
webpage2 <- read_html(url2)
turkey <- html_nodes(webpage2,'.mw-parser-output div td:nth-child(1)')
data_turkey<-html_text(turkey)
data_turkey<-data_turkey[37:117]
data_turkey<-html_text(turkey)
data_turkey<-data_turkey[38:118]
data_turkey<-gsub("\n", "", data_turkey)
runApp('C:/Users/phago/Desktop/corona-app-v1')
View(mapdata1)
class(mapdata1$z)
View(data_turkey)
turkey2 <- html_nodes(webpage2,'.mw-parser-output div td:nth-child(2)')
data_turkey2<-html_text(turkey2)
data_turkey2<-data_turkey2[36:116]
data_turkey2<-gsub("\n", "", data_turkey2)
data_turkey2
turkey2 <- html_nodes(webpage2,'.mw-parser-output div td:nth-child(2)')
data_turkey2<-html_text(turkey2)
data_turkey2<-data_turkey2[36:116]
data_turkey2
turkey2 <- html_nodes(webpage2,'.mw-parser-output div td:nth-child(2)')
data_turkey2<-html_text(turkey2)
data_turkey2<-data_turkey2[37:117]
data_turkey2<-gsub("\n", "", data_turkey2)
data_turkey$`Vaka sayısı` <- data_turkey2
View(data_turkey)
runApp('C:/Users/phago/Desktop/corona-app-v1')
View(mapdata1)
mapdata1$z<-as.numeric(mapdata1$z)
class(mapdata1$z)
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
total
changevaka<-(todayn$`Vaka sayisi`[length(todayn$`Vaka sayisi`)]-todayn$`Vaka sayisi`[length(todayn$`Vaka sayisi`)-1])/
todayn$`Vaka sayisi`[length(todayn$`Vaka sayisi`)-1]
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
runApp('C:/Users/phago/Desktop/corona-app-v1')
shiny::runApp('C:/Users/phago/Desktop/corona-app-v1')
